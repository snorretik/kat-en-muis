+ Addition
- Subtraction
* Multiplication
/ Division

Delen wordt float altijd.

---

String
'Hello' + 'World!' 
of 
'Hello ' + 'World!' 
of
'Hello ' + var (moet string zijn)

Multiline string
>>> fizz = '''Dear Alice,
I will return to Carol's house at the end of the month.
Your friend,
Bob'''
>>> print(fizz)
Dear Alice,
I will return to Carol's house at the end of the month.
Your friend,
Bob

String methods
zoek "python string methods" op google is wel grappig
split()
lower()
upper()
startswith()
endswith()
join() U.join(['Hello', 'World']) wordt HelloUWorld
isdigit()
find()

String interpolation
%s	%
>>> print('Hello, %s. Will you go to the %s at %s this %s at %s?' % (variabel1, variabel2, etc))
Hello, Alice. Will you go to the party at the pool this Saturday at 6:00pm?

---

Input
var = input() (is always a string)

---

# comments

---

Print
print(string)
of
print('Hello')

keyword parameter
end=''
print('Interrupting cow wh', end='')
print('-MOO!')
is 1 regel door de end=

---

Namen
- case sensitive

---

Import
import random, time, math, sys
random.randint(1, 2) (binair in dit geval dus)
random.choice('cat', 'mouse', 'dog')
random.shuffle() niet(!) numbers = random.shuffle(numbers) het is in place
time.sleep(2)
math.sqrt()
sys.exit()

---

Statements
for - range
if
else
elif
while
break (for loops) (springt uit loop)
return
continue (gaat door in loops)

del (lists move back 1 (or more) places)

---

int()
float()
str()
bool() vaak false als ze leeg zijn

---

Bool
True
False
var = True

<
>
<=
>=
==
!=

Operatoren
and
or
not
in

---

Escape 
\ for quotes
\'

\\	Backslash (\)
\'	Single quote (')
\"	Double quote (")
\n	Newline
\t	Tab

---

functies
def functienaam(parameters):

Andere functies:
print()
randint()
input()
len() (begint bij 1) (kan ook op dictionaries)
list()
range() vb. list(range())
round(hetNummer, hoeveelAchterKomma)

--- 

Global Local
Local in functies

---

Constant variables
ALL_UPPER
of
HANGMAN_PICS

---

Lists
animals = ['aardvark', 'anteater', 'antelope', 'albert']
animals[0] (start bij 0)
animals[1]
animals[2]

>>> animals[0] + animals[2]
'aardvarkantelope'

List Concatenation
>>> [1, 2, 3, 4] + ['apples', 'oranges'] + ['Alice', 'Bob']
[1, 2, 3, 4, 'apples', 'oranges', 'Alice', 'Bob']

List methods
spam.reverse()
spam.append('string')
spam.sort() bij strings alphabetisch bij nummers van klein naar groot
spam.remove() alleen de eerste van een lijst(lijst!) en x.remove(42), not x = x.remove(42)

List and string slicing
>>> spam = ['apples', 'bananas', 'carrots', 'dates']
>>> spam[1:3]
['bananas', 'carrots']

>>> spam = ['apples', 'bananas', 'carrots', 'dates']
>>> spam[:2] (denkt 0)
['apples', 'bananas']

>>> spam = ['apples', 'bananas', 'carrots', 'dates']
>>> spam[2:] (denkt rest of list)
['carrots', 'dates']

>>> myName = 'Zophie the Fat Cat'
>>> myName[4:12]
'ie the F'
>>> myName[:10]
'Zophie the'
>>> myName[7:]
'the Fat Cat'

list references
>>> spam = [0, 1, 2, 3, 4, 5]
>>> cheese = spam
>>> cheese[1] = 'Hello!'
>>> spam
[0, 'Hello!', 2, 3, 4, 5]
>>> cheese
[0, 'Hello!', 2, 3, 4, 5]
Dit is moeilijke shit...
Notice that cheese = spam copies the list reference in spam to cheese ?, instead of copying the list value itself. Now both spam and cheese store a reference that refers to the same list value. But there is only one list because the list itself wasn’t copied. Figure 10-6 shows this copying.
Oplossing:
>>> spam = [0, 1, 2, 3, 4, 5]
>>> cheese = [0, 1, 2, 3, 4, 5]


---

Dictionairies
>>> spam = {'hello':'Hello there, how are you?', 4:'bacon', 'eggs':9999}
>>> spam['hello']
'Hello there, how are you?'
>>> spam[4]
'bacon'
>>> spam['eggs']
9999

dictionaries are unordered

dictionary methods
keys()
values()

---

multiple assignment
>>> spam, eggs, ham = ['apples', 'cats', 42] (zelfde aantal, 3 om 3 dus)
>>> spam
'apples'
>>> eggs
'cats'
>>> ham
42
hetzelfde als
>>> spam = ['apples', 'cats', 42][0]
>>> eggs = ['apples', 'cats', 42][1]
>>> ham = ['apples', 'cats', 42][2]

---

Short circuiten
Is een ding, in ieder geval. Bij or statements is het soms niet nodig om verder te gaan.

---

None

---

+=
-=
*=
/=
Voor de volledigheid

---


-------------------------------------------------------------------

Debugger

